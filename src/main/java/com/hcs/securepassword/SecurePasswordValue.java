package com.hcs.securepassword;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.hcs.securepassword.service.SecurePasswordService;
import com.intellij.uiDesigner.core.Spacer;
import org.apache.commons.lang3.RandomStringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigInteger;
import java.util.Calendar;
import java.util.concurrent.TimeUnit;

@Component
public class SecurePasswordValue {
    private JButton generatePassword;
    protected JPanel panel;
    private JLabel pic;
    private JButton checkButton;
    private JTextField textField1;
    private Timer timer;
    private int i = 0;
    private java.util.List images;

    @Autowired
    private SecurePasswordService securePasswordService;

    public SecurePasswordValue() {
        $$$setupUI$$$();
        checkButton.addActionListener(new ActionListener() {
            /**
             * Invoked when an action occurs.
             *
             * @param e
             */
            @Override
            public void actionPerformed(ActionEvent e) {
                JOptionPane.
                        showMessageDialog(
                                JOptionPane.getRootFrame(), //pass the jFrame in the constructor
                                checkPassword(textField1.getText()));

            }
        });
        generatePassword.addActionListener(new ActionListener() {
            /**
             * Invoked when an action occurs.
             *
             * @param e
             */
            @Override
            public void actionPerformed(ActionEvent e) {
                JOptionPane.
                        showMessageDialog(
                                JOptionPane.getRootFrame(), //pass the jFrame in the constructor
                                "New Password: " + getPassword()
                        );
            }
        });
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(4, 6, new Insets(0, 0, 0, 0), -1, 30));
        panel.setBorder(BorderFactory.createTitledBorder("Secure your Passwords"));
        pic.setToolTipText("Security Tips");
        panel.add(pic, new GridConstraints(0, 0, 1, 6, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(400, 200), new Dimension(1000, 500), null, 0, false));
        textField1 = new JTextField();
        textField1.setToolTipText("Enter new password");
        panel.add(textField1, new GridConstraints(1, 1, 3, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(300, -1), null, 0, false));
        checkButton = new JButton();
        checkButton.setText("Check");
        checkButton.setToolTipText("Check if password is strong");
        panel.add(checkButton, new GridConstraints(1, 3, 3, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        generatePassword = new JButton();
        generatePassword.setHideActionText(false);
        generatePassword.setHorizontalAlignment(0);
        generatePassword.setText("Generate");
        generatePassword.setToolTipText("Create new password");
        panel.add(generatePassword, new GridConstraints(1, 4, 3, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel.add(spacer1, new GridConstraints(2, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Enter your password: ");
        panel.add(label1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
        pic = new JLabel();
        pic.setBounds(40, 30, 1500, 900);
        timer = new Timer(5000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                images = securePasswordService.getFilenames();
                setImageSize(images.get(i).toString());
                i += 1;
                if (i >= images.size())
                    i = 0;
            }
        });
        timer.start();
    }

    private void setImageSize(String picsPath) {
        ImageIcon icon = new ImageIcon(picsPath);
        Image iconImage = icon.getImage();
        Image scaledImage = iconImage.getScaledInstance(pic.getWidth(), pic.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon newImageIcon = new ImageIcon(scaledImage);
        pic.setIcon(newImageIcon);
    }

    private String getPassword() {
        String chars = RandomStringUtils.randomAlphanumeric(64) + RandomStringUtils.randomAscii(64);
        return RandomStringUtils.random(16, chars);
    }

    private String checkPassword(String text) {
        int score = 0;
        boolean hasDigit = false;
        boolean hasLetter = false;
        boolean hasSpecial = false;
        int sizeOfSymbolSet = 0;

        if (text.length() >= 10)
            score += 2;
        else if (score == 0 && text.length() >= 8)
            score += 1;
        else {
            String timeToCrack = timeToCrack(52, text);
            String msg = "Your password can be cracked in: " + timeToCrack;
            return "VERY WEAK PASSWORD!! " + msg;
        }
        for (int i = 0; i < text.length(); i++) {
            if (Character.isDigit(text.charAt(i))) {
                score += 1;
                sizeOfSymbolSet = !hasDigit ? sizeOfSymbolSet + 10 : sizeOfSymbolSet;
                hasDigit = true;
            }
            if (Character.isAlphabetic(text.charAt(i))) {
                score += 1;
                sizeOfSymbolSet = !hasLetter ? sizeOfSymbolSet + 52 : sizeOfSymbolSet;
                hasLetter = true;
            }
            if (Character.getType(text.charAt(i)) >= 26 && Character.getType(text.charAt(i)) <= 126) {
                score += 2;
                sizeOfSymbolSet = !hasSpecial ? sizeOfSymbolSet + 102 : sizeOfSymbolSet;
                hasSpecial = true;
            }
        }
        String timeToCrack = timeToCrack(sizeOfSymbolSet, text);
        String msg = "Your password can be cracked in: " + timeToCrack;
        return score <= 8 ? "WEAK PASSWORD!! " + msg : "STRONG PASSWORD!! ";
    }

    private String timeToCrack(int sizeOfSymbolSet, String password) {
        // Assuming a typical computer checks 4 billion (4*10^9) passwords per sec
        BigInteger timeTaken = BigInteger.valueOf((long) Math.pow(sizeOfSymbolSet, password.length()) / 10000000L);
        return formatMillis(timeTaken.multiply(BigInteger.valueOf(1000)));
    }

    private String formatMillis(BigInteger timeTaken) {
        long toDays = timeTaken.divideAndRemainder(BigInteger.valueOf(86400000000000L))[0].longValue(); //millis to days
        long dy = toDays;
        final long yr = dy / 365;
        dy %= 365;
        final long mn = dy / 30;
        dy %= 30;
        final long wk = dy / 7;
        dy %= 7;
        long toHrs = timeTaken.divideAndRemainder(BigInteger.valueOf(3600000000000L))[0].longValue(); //millis to hours
        long toMins = timeTaken.divideAndRemainder(BigInteger.valueOf(60000000000L))[0].longValue(); //TimeUnit.MILLISECONDS.toMinutes(timeTaken);
        long toSecs = timeTaken.divideAndRemainder(BigInteger.valueOf(1000000000L))[0].longValue(); //TimeUnit.MILLISECONDS.toSeconds(timeTaken);
        final long hr = toHrs
                - TimeUnit.DAYS.toHours(toDays);
        final long min = toMins
                - TimeUnit.HOURS.toMinutes(toHrs);
        final long sec = toSecs
                - TimeUnit.MINUTES.toSeconds(toMins);
        final long ms = TimeUnit.MILLISECONDS.toMillis(timeTaken.divideAndRemainder(BigInteger.valueOf(1000000L))[0].longValue())
                - TimeUnit.SECONDS.toMillis(toSecs);
        return String.format("%d Years %d Months %d Weeks %d Days %d Hours %d Minutes %d Seconds %d Milliseconds", yr,
                mn, wk, dy, hr, min, sec, ms);
    }
}
